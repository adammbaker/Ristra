<<<<<<< HEAD
# Generated by Django 2.2.1 on 2019-06-14 04:05

from django.conf import settings
=======
# Generated by Django 2.2.2 on 2019-06-17 00:45

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
>>>>>>> 1de81742667c6c2c1dacb728a0ca459f82801b8a
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
<<<<<<< HEAD
        ('shortener', '0003_auto_20190528_1558'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
=======
        ('auth', '0011_update_proxy_permissions'),
>>>>>>> 1de81742667c6c2c1dacb728a0ca459f82801b8a
    ]

    operations = [
        migrations.CreateModel(
<<<<<<< HEAD
            name='Capacity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500, unique=True, verbose_name='Capacity')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Description of capacity')),
            ],
            options={
                'verbose_name': 'Capacity',
                'verbose_name_plural': 'Capacities',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(max_length=500, unique=True, verbose_name='Language')),
            ],
            options={
                'verbose_name': 'Language',
                'verbose_name_plural': 'Languages',
            },
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lead', to='intake.Capacity')),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500, unique=True, verbose_name='Name of the organization')),
                ('city', models.CharField(max_length=500, null=True, verbose_name='City')),
                ('url', models.CharField(max_length=500, null=True, verbose_name='Website')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Additional notes')),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='State')),
                ('abbreviation', models.CharField(max_length=5, unique=True, verbose_name='State abbreviation')),
=======
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=False)),
                ('is_teacher', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Capacity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500, unique=True, verbose_name='Capacity')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Description of capacity')),
            ],
            options={
                'verbose_name': 'Capacity',
                'verbose_name_plural': 'Capacities',
            },
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('specialty', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_lead', to='intake.Capacity')),
>>>>>>> 1de81742667c6c2c1dacb728a0ca459f82801b8a
            ],
            options={
                'verbose_name': 'State',
                'verbose_name_plural': 'States',
            },
        ),
        migrations.CreateModel(
<<<<<<< HEAD
            name='Volunteer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300, verbose_name="Volunteer's name")),
                ('email', models.EmailField(max_length=300, null=True, verbose_name="Volunteer's email")),
                ('phone_number', models.CharField(max_length=300, verbose_name="Volunteer's phone number")),
                ('notes', models.TextField(blank=True, help_text='Additional notes', null=True)),
                ('affiliations', models.ManyToManyField(to='intake.Organization', verbose_name='Organizations to which the volunteer is affiliated')),
                ('campaigns', models.ManyToManyField(to='shortener.UrlMap', verbose_name='Active intake campaigns')),
                ('capacities', models.ManyToManyField(to='intake.Capacity', verbose_name='Volunteer capacities')),
                ('languages', models.ManyToManyField(to='intake.Language', verbose_name='Languages spoken')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
=======
            name='TeamLead',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lead', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_lead', to='intake.Lead')),
>>>>>>> 1de81742667c6c2c1dacb728a0ca459f82801b8a
            ],
            options={
                'verbose_name': 'Volunteer',
                'verbose_name_plural': 'Volunteers',
            },
        ),
<<<<<<< HEAD
        migrations.AddField(
            model_name='organization',
            name='leads',
            field=models.ManyToManyField(related_name='leads', through='intake.Lead', to='intake.Volunteer'),
        ),
        migrations.AddField(
            model_name='organization',
            name='point_of_contact',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='pointofcontact', to='intake.Volunteer', verbose_name='Point of contact'),
        ),
        migrations.AddField(
            model_name='organization',
            name='state',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='intake.State', verbose_name='State'),
        ),
        migrations.AddField(
            model_name='lead',
            name='organization',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lead', to='intake.Organization'),
        ),
        migrations.AddField(
            model_name='lead',
            name='volunteer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lead', to='intake.Volunteer'),
        ),
=======
>>>>>>> 1de81742667c6c2c1dacb728a0ca459f82801b8a
    ]
